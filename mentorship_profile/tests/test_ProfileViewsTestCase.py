import re
from unittest.mock import MagicMock

from django.contrib.auth.models import User
from django.test import (
    Client,
    TestCase,
    RequestFactory,
)
from django.urls import reverse
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes

from .test_utilities import UserFactory
from ..models import Mentor, Mentee
from ..tokens import account_activation_token
from ..views import _send_registration_email, _get_user_from_uid


class ProfileViewTestCase(TestCase):
    """Unit Tests for profile views and related functions."""

    def setUp(self):
        """Create request and client obects for view tests."""
        self.client = Client()
        self.request = RequestFactory()

    def test_valid_activate_account_view(self):
        """Test the activate_account_view with a valid user and token."""
        user = UserFactory.create()
        self.assertFalse(user.profile.email_confirmed)
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = account_activation_token.make_token(user)

        res = self.client.get(reverse(
            'activate_account',
            kwargs={
                "uidb64": uid,
                "token": token
            }
        ))

        # Valid response should have 200 status code and the html should
        # contain the username.
        self.assertEqual(res.status_code, 200)
        self.assertTrue(user.username in res.content.decode('utf-8'))

        same_user = User.objects.first()

        # gut check - users should be the same.
        self.assertEqual(user, same_user)
        self.assertTrue(same_user.profile.email_confirmed)

    def test_invalid_activate_account_view_no_token(self):
        """Test the activate_account_view won't work w/ bad token input."""
        uid = "bob"
        token = "supersecrettoken"
        url = "/activate_account/" + uid + "/" + token

        res = self.client.get(url)
        self.assertEqual(res.status_code, 404)

    def test_invalid_activate_account_view_with_user_bad_token(self):
        """Test activate_account_view with wrong user token."""
        user = UserFactory.create()
        user2 = UserFactory.create()
        self.assertFalse(user.profile.email_confirmed)
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = account_activation_token.make_token(user2)

        res = self.client.get(reverse(
            'activate_account',
            kwargs={
                "uidb64": uid,
                "token": token
            }
        ))
        self.assertTrue(b"Invalid activation link" in res.content)
        self.assertEqual(
            'mentorship_profile/activation_invalid.html',
            res.templates[0].name
        )

    def test_send_registration_email(self):
        """Test that we can send a formatted email."""
        user = UserFactory.create()
        test_domain = "127.0.0.1"
        test_uid = urlsafe_base64_encode(force_bytes(user.pk)).decode('utf-8')
        test_token = account_activation_token.make_token(user)

        # mock the email_user method so we can test how we build the email.
        user.email_user = MagicMock()

        self.request.user = user
        self.request.get_host = lambda: test_domain
        _send_registration_email(self.request, user, "mentor")
        subject, message = user.email_user.call_args[0]

        # message is dynamically generated by template, verify that certain
        # values are present.
        self.assertTrue(test_domain in message)
        self.assertTrue(test_uid in message)
        self.assertTrue(user.username in message)
        self.assertTrue(test_token in message)
        self.assertEqual(subject, "Activate your PuPPy Mentorship Account")

    def test_get_user_from_uid_valid_uid(self):
        """Test _get_user_from_uid returns correct user instance."""
        user = UserFactory.create()
        test_uid = urlsafe_base64_encode(force_bytes(user.pk))

        test_user = _get_user_from_uid(test_uid)
        self.assertEqual(user, test_user)

    def test_get_user_from_uid_invalid_uid(self):
        """Test _get_user_from_uid returns None for invalid uid."""
        test_uids = ["this is clearly not correct", True, 0, None]

        for uid in test_uids:
            self.assertTrue(_get_user_from_uid(uid) is None)

    def test_get_register_mentor_view(self):
        """Test get method with register_mentor_view."""
        res = self.client.get("/signup/mentor", follow=True)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/register.html',
            res.templates[0].name
        )

    def test_post_register_mentor_view(self):
        """Test post valid user data with register_mentor_view."""
        mentor_data = {
            "user-username": "bob",
            "user-email": "bob@email.wee",
            "user-password1": "supersecret",
            "user-password2": "supersecret",
            "profile-bio": "Very personal information.",
            "mentor-area_of_expertise": "backend devops",
            "mentor-mentee_capacity": "2",
        }
        res = self.client.post(
            "/signup/mentor/",
            mentor_data,
            follow=True
        )
        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/activate_notification.html',
            res.templates[0].name
        )
        user = User.objects.first()
        self.assertEqual(
            user.username,
            mentor_data["user-username"]
        )
        mentor = Mentor.objects.first()
        self.assertEqual(
            user.profile,
            mentor.profile
        )

        # Test that the account is not yet activated.
        self.assertFalse(user.is_active)
        self.assertFalse(user.profile.email_confirmed)

        # Now test that we can't re-register the same user.
        res2 = self.client.post(
            "/signup/mentor/",
            mentor_data
        )
        self.assertTrue(
            b"A user with that username already exists." in
            res2.content
        )

    def test_post_invalid_data_register_mentor_view(self):
        """Test post invalid user data with register_mentor_view."""
        invalid_mentor_data = {
            "user-username": "bob",
            "user-email": "bob@email.wee",
            "user-password1": "supersecret",
            "user-password2": "supersecretLOL",
            "profile-bio": "Very personal information.",
            "mentor-area_of_expertise": "backend devops",
            "mentor-mentee_capacity": "2",
        }
        res = self.client.post(
            "/signup/mentor/",
            invalid_mentor_data,
            follow=True
        )

        # Should be redirected to the same form page.
        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/register.html',
            res.templates[0].name
        )

        # User should not have been registered, users should be empty.
        users = User.objects.all()
        self.assertEqual(len(users), 0)

    def test_get_register_mentee_view(self):
        """Test get method with register_mentee_view."""
        res = self.client.get("/signup/mentee/", follow=True)

        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/register.html',
            res.templates[0].name
        )

    def test_post_register_mentee_view(self):
        """Test post valid user data with register_mentee_view."""
        mentee_data = {
            "user-username": "Joe",
            "user-email": "bob@email.wee",
            "user-password1": "supersecret",
            "user-password2": "supersecret",
            "profile-bio": "Very personal information.",
            "mentee-area_of_interest": "backend devops",
            "mentee-goals": "Accomplish all the things!",
        }
        res = self.client.post(
            "/signup/mentee/",
            mentee_data,
            follow=True
        )
        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/activate_notification.html',
            res.templates[0].name
        )
        user = User.objects.first()
        self.assertEqual(
            user.username,
            mentee_data["user-username"]
        )
        mentee = Mentee.objects.first()
        self.assertEqual(
            user.profile,
            mentee.profile
        )

        # Test that the account is not yet activated.
        self.assertFalse(user.is_active)
        self.assertFalse(user.profile.email_confirmed)

        # Now test that we can't re-register the same user.
        res2 = self.client.post(
            "/signup/mentee/",
            mentee_data
        )
        self.assertTrue(
            b"A user with that username already exists." in
            res2.content
        )

    def test_post_invalid_data_register_mentee_view(self):
        """Test post invalid user data with register_mentee_view."""
        invalid_mentee_data = {
            "user-username": "Joe",
            "user-email": "bob@email.wee",
            "user-password1": "supersecret",
            "user-password2": "supersecretLOL",
            "profile-bio": "Very personal information.",
            "mentee-area_of_interest": "backend devops",
            "mentee-goals": "Accomplish all the things!",
        }
        res = self.client.post(
            "/signup/mentee/",
            invalid_mentee_data,
            follow=True
        )

        # Should be redirected to the same form page.
        self.assertEqual(res.status_code, 200)
        self.assertEqual(
            'mentorship_profile/register.html',
            res.templates[0].name
        )

        # User should not have been registered, users should be empty.
        users = User.objects.all()
        self.assertEqual(len(users), 0)
